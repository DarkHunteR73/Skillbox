#include "Player.h"
#include "Track.h"

int main() {
  std::srand(std::time(nullptr));
  int playlistSize = std::rand() % 100 + 20;

  Player* player = new Player(playlistSize);
  std::cout << "Playlist loaded. Tracks: " << playlistSize << std::endl;

  while (true) {
    std::string command;
    std::cout << "Command: ";
    std::cin >> command;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    system("cls");

    if (command == "play") {
      player->play();
    } else if (command == "pause") {
      player->pause();
    } else if (command == "next") {
      player->next();
    } else if (command == "stop") {
      player->stop();
    } else if (command == "exit") {
      delete player;
      return EXIT_SUCCESS;
    } else {
      std::cerr << "Unknown command!" << std::endl;
    }
  }
}

//Задание 1. Реализация имитации аудиоплеера
//
//
//Что нужно сделать
//
//С помощью классов реализуйте программу имитации работы аудиоплеера.В плеере находится несколько аудиозаписей, 
//доступных для воспроизведения.Для них вы должны создать отдельный класс Track.
//Полями этого класса должны быть : название, дата создания(здесь вы можете использовать тип std::tm) и 
//продолжительность записи в секундах.
//
//Сам плеер тоже реализуйте с помощью класса.Внутри он должен содержать список доступных записей и нужные для 
//логики работы плеера поля.
//
//Пользователь взаимодействует с программой с помощью команд :
//
//Команда play запрашивает у пользователя название записи для воспроизведения и начинает её воспроизведение.
//Воспроизведение симулируется с помощью вывода в консоль всей информации о записи.Если произведение какой - то 
//записи уже начато, ничего не происходит.
//
//Команда pause.Ставит запись на паузу, о чём выводит соответствующее сообщение в консоль.
//Если запись уже на паузе или не воспроизводится вовсе, ничего не происходит.
//
//Команда next переходит к следующей записи для воспроизведения.Запись при этом выбирается случайно, 
//как будто плеер работает в режиме shuffle.
//
//Команда stop прекращает воспроизведение текущей записи, если таковая имеется.Об этом выводится сообщение в 
//консоль.Два раза остановить воспроизведение невозможно, так что команда должна срабатывать только в первом случае.
//
//Команда exit — выход из программы.
//
//
//Советы и рекомендации
//
//Забудьте про отдельные глобальные функции и используйте возможности классов и методов по максимуму.
//
//
//Что оценивается
//
//Корректность работы программы.


