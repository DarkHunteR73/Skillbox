#include <ctime>
#include <iomanip>
#include <iostream>

int main() {
  std::tm timer{};

  std::cout << "Enter timer (MM:SS): ";
  std::cin >> std::get_time(&timer, "%M:%S");
  std::time_t endTimePoint =
      (timer.tm_min * 60 + timer.tm_sec) + std::time(nullptr);
  timer = *std::gmtime(&endTimePoint);

  std::time_t diffTime = 1;

  while (diffTime > 0) {
    if ((diffTime + std::time(nullptr)) != endTimePoint) {
      diffTime = endTimePoint - std::time(nullptr);

      timer = *std::gmtime(&diffTime);
      system("cls");
      std::cout << std::put_time(&timer, "%M:%S");
    }
  }

  std::cout << "\nDING! DING! DING!" << std::endl;
}

//Задание 3. Реализация программы таймера
//
//Что нужно сделать
//
//Реализуйте работу точного таймера с визуальной отдачей.
//
//В начале программы пользователь вводит количество минут и секунд, которые
//требуется засечь на таймере, и нажимает «Ввод».
//
//После этого начинается обратный отсчёт времени, о чём незамедлительно и
//последовательно сообщается пользователю.Формат вывода такой же, как и при
//вводе интервала : минуты и секунды.
//
//Как только отсчёт на таймере иссяк, программа сообщает об этом с помощью
//вывода в консоль специального сообщения.Сообщение вместо аудиосигнала может
//выглядеть так : DING!DING!DING!
//
//
//Советы и рекомендации
//
//Для ввода значения для засекания времени используйте std::get_time, но в
//качестве формата запросите только минуты и секунды.Целевое время для остановки
//таймера вычислите сами с помощью манипуляции над текущим std::time.Количество
//оставшегося времени выводите в цикле и вычислите его самостоятельно с помощью
//обращения с типом std::time_t как с секундами.
//
//
//Что оценивается
//
//Корректность работы программы при разных заданных дефинициях макросов.
