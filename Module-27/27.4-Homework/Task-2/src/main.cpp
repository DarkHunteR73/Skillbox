#include "Shape.h"
#include <string>

int main()
{
	std::cout << "Enter shape type: ";
	std::string cmd;
	std::cin >> cmd;

	if (cmd == "circle")
	{
		Circle circle;
		circle.getResult();
	}
	else if (cmd == "triangle")
	{
		Triangle triangle;
		triangle.getResult();
	}
	else if (cmd == "square")
	{
		Square square;
		square.getResult();
	}
	else if (cmd == "rectangle")
	{
		Rectangle rectangle;
		rectangle.getResult();
	}
	else
	{
		std::cerr << "Unknown shape" << std::endl;
	}
}

//	Задание 2. Иерархия геометрических фигур
//	
//	
//	Что нужно сделать
//	
//	Спроектируйте иерархию классов различных фигур : круг, квадрат, равносторонний треугольник, 
//	прямоугольник(прямоугольный параллелепипед).
//	
//	
//	Для всех этих фигур есть общие поля - данные — это координаты их центра и условный цвет фигуры : 
//	красный, синий или зелёный.
//	
//	Для отдельных фигур есть и уникальные параметры : радиус — для круга, 
//	длина ребра — для квадрата и равностороннего треугольника, ширина и высота для прямоугольника.
//	Все данные — это вещественные числа с удвоенной точностью.
//	
//	
//	Для каждой из фигур требуется определить метод нахождения площади фигуры, 
//	а также метод нахождения прямоугольника, описывающего фигуру полностью(он может быть больше зоны фигуры, 
//	но не меньше).
//	
//	
//	Для лучшего понимания задачи приводится иллюстрация.На ней разными цветами помечены площади фигур, 
//	а пунктиром изображены прямоугольники, описывающие фигуры.
//	
//	
//	Для теста предусмотрите ввод пользователем команд : circle, square, triangle, rectangle, 
//	соответствующих фигурам.Команды должны получать параметры фигур и 
//	выводить их площадь и описывающий прямоугольник.
//	
//	
//	Советы и рекомендации
//	
//	Для цвета фигуры вы можете использовать собственный тип enum, в котором может содержаться и 
//	константа отсутствия цвета - None.
//	
//	Геометрические формулы вы можете найти в интернете.
//	
//	
//	Что оценивается
//	
//	Элегантность выстроенной иерархии классов.Корректность работы методов вычислений для фигур важна, 
//	но не столь принципиальна.