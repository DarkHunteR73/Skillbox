#include "container.h"

int main() {
	Container<int, double> A{ {  187, 6555.0    },
							  {   11, 9958.8847 },
							  { 4447, 11254.144 },
							  {   11, 0.1158989 },
							  {  187, 321.0045  } };

	A.add(189, 15444);
	A.remove(11);
	A.print();
	std::cout << std::endl;
	A.find(187);
}

//	Задание 3. Реестр данных на шаблонах
//	
//	Что нужно сделать
//	
//	С помощью шаблонов реализуйте простой класс реестра, хранящий произвольные типы значений по ключам 
//	произвольного типа.Ключи при этом могут повторяться.
//	
//	Реестр должен поддерживать следующие операции : добавление элемента с ключом, удаление элементов с 
//	заданным ключом, вывод всех значений с ключами в консоль, поиск элементов по ключу.
//	
//	Для тестирования программы предусмотрите ввод данных и команд из стандартной консоли :
//	
//	add — добавить элемент с ключом;
//	remove — удалить все элементы с заданным ключом;
//	print — напечатать на экране все элементы с их ключами;
//	find — найти все элементы по их ключу.
//	
//	Данный словарь должен работать на значениях и ключах следующих типов : int, double, std::string.
//	
//	
//	Рекомендации
//	
//	Для реализации можете использовать стандартный шаблон std::vector, который в свою очередь уже будет 
//	хранить ваши пары ключей и значений.
//	Сама пара ключа и значения как раз и будет классом(или струкурой), шаблонизированным двумя типами : 
//	типом значения и типом ключа.
//	При желании вы можете создать отдельную шаблонизированную функцию с вводом команд и их данных.
//	
//	
//	Что оценивается
//	
//	Корректность работы логики программы, реализованной с помощью шаблонов.