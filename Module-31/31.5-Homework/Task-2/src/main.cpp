#include "IGraph.h"

int main() {
	ListGraph lg(6);
	lg.AddEdge(0, 1);
	lg.AddEdge(0, 2);
	lg.AddEdge(0, 3);
	lg.AddEdge(1, 2);
	lg.AddEdge(1, 4);
	lg.AddEdge(2, 3);
	lg.AddEdge(2, 5);
	lg.AddEdge(3, 4);
	lg.AddEdge(4, 5);

	MatrixGraph mg(&lg);
	MatrixGraph mmg(&mg);
	ListGraph lll(&mg);
	ListGraph ttt(&lll);

	std::vector<int> result;
	lg.GetPrevVertices(3, result);
}

//	Задача 2. Реализация класса графа
//	
//	
//	Что нужно сделать :
//	
//	В любом доступном источнике прочитайте, что такое графы в дискретной математике и как граф можно 
//	представить в программе(что такое матрицы смежности и списки смежности)
//	
//	Вам дан базовый интерфейс для представления ориентированного графа
//	
//	Необходимо написать две реализаций интерфейса :
//	
//	ListGraph, хранящий граф в виде массива списков смежности,
//	MatrixGraph, хранящий граф в виде матрицы смежности,
//	
//	Также необходимо реализовать конструктор, принимающий IGraph* .Такой конструктор должен скопировать 
//	переданный граф в создаваемый объект(обратите внимание, что иногда в одну реализацию графа 
//	копируется другая) Реализуйте в том числе все конструкторы копий и операторы присваивания, если необходимо.
//	
//	
//	class IGraph {
//	
//	public:
//	
//	    virtual ~IGraph() {}
//	
//	    IGraph() {};
//	
//	    IGraph(IGraph* _oth) {};
//	
//	    virtual void AddEdge(int from, int to) = 0; // Метод принимает вершины начала и конца ребра и добавляет ребро
//	
//	    virtual int VerticesCount() const = 0; // Метод должен считать текущее количество вершин
//	
//	    virtual void GetNextVertices(int vertex, std::vector<int>& vertices) const = 0; // Для конкретной вершины метод выводит в вектор “вершины” все вершины, в которые можно дойти по ребру из данной
//	
//	    virtual void GetPrevVertices(int vertex, std::vector<int>& vertices) const = 0; // Для конкретной вершины метод выводит в вектор “вершины” все вершины, из которых можно дойти по ребру в данную
//	
//	};
//	
//	Чек - лист для проверки задачи
//	
//	Реализованы два класса - наследника, имплементирующие корректные алгоритмы работы с графом
//	как с матрицей смежности и списками смежности